#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
# elif infocmp xterm-256color >/dev/null 2>&1; then
# 	export TERM='xterm-256color';
    export TERM='rxvt-unicode-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="[${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	bold=""$(tput bold);
	dim="$(tput dim)"
	underline="$(tput setaf 0)"
	blink="$(tput blink)"
	invert="$(tput rev)"
	reset="\e[0m";
	
	black="$(tput setaf 0)";
	darkgray="$(tput setaf 8)";
	red="$(tput setaf 1)";
	lightred="$(tput setaf 9)";
	green="$(tput setaf 2)";
	lightgreen="$(tput setaf 10)";
	yellow="$(tput setaf 3)";
	lightyellow="$(tput setaf 11)";
	blue="$(tput setaf 4)";
	lightblue="$(tput setaf 12)";
	purple="$(tput setaf 5)";
	lightpurple="$(tput setaf 13)";
	cyan="$(tput setaf 6)";
	lightcyan="$(tput setaf 14)";
	white="$(tput setaf 7)";
	lightgray="$(tput setaf 15)";

fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${bold}${red}";
else
	userStyle="${bold}${lightyellow}";  # username
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${bold}${cyan}";
fi;

# Set the terminal title and prompt.
# PS1="\[\e]0;\W\007\]"; # working directory base name

PS1="\[${reset}\]"; # begin prompt; prevent commands affecting it
PS1+="\[${white}\]["; # opening bracket
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\]@";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${reset}\]";  # clear formatting for user/host
PS1+="\[${lightgreen}\] \w"; # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${lightred}\]\" \"\[${lightred}\]\")"; # Git repository details
PS1+="\[${white}\]]\$ " # closing bracket
PS1+="\[${reset}\]" # clear for user input
export PS1;

PS2="\[${white}\]> \[${reset}\]";
export PS2;

